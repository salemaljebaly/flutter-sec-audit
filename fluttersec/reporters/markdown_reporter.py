"""
Markdown report generator
"""
from pathlib import Path
from typing import Optional, Dict
from datetime import datetime
from ..models import AnalysisResult, Severity


class MarkdownReporter:
    """Generate Markdown reports for GitHub/GitLab"""

    def generate(self, result: AnalysisResult, output_path: str, attack_result: Optional[Dict] = None) -> None:
        """Generate Markdown report"""
        lines = []

        # Header
        lines.append(f"# Security Analysis Report: {result.app_name}")
        lines.append(f"\n**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"**Platform:** {result.platform.value}")
        lines.append(f"**Package:** {result.package_name}")
        lines.append(f"**File:** {result.file_path}\n")

        # Executive Summary
        lines.append("## Executive Summary\n")
        score_emoji = "üü¢" if result.security_score >= 75 else "üü°" if result.security_score >= 50 else "üî¥"
        lines.append(f"{score_emoji} **Security Score:** {result.security_score}/100 ({result.grade})\n")

        counts = result.count_by_severity()
        lines.append("### Findings Breakdown\n")
        lines.append(f"- üî¥ **Critical:** {counts.get('CRITICAL', 0)}")
        lines.append(f"- üü† **High:** {counts.get('HIGH', 0)}")
        lines.append(f"- üü° **Medium:** {counts.get('MEDIUM', 0)}")
        lines.append(f"- üîµ **Low:** {counts.get('LOW', 0)}\n")

        # Attack Simulation
        if attack_result:
            lines.append("## Attack Simulation\n")
            lines.append(f"‚è±Ô∏è **Time to Compromise:** {attack_result['overall_time_to_compromise']} minutes")
            lines.append(f"üë§ **Most Likely Attacker:** {attack_result['most_likely_attacker'].title()}\n")

            lines.append("### Attack Scenario\n")
            for step in attack_result['attack_scenario']:
                lines.append(step)
            lines.append()

        # Detailed Findings
        if result.findings:
            lines.append("## Detailed Findings\n")

            # Group by severity
            for severity in [Severity.CRITICAL, Severity.HIGH, Severity.MEDIUM, Severity.LOW]:
                severity_findings = result.get_findings_by_severity(severity)
                if not severity_findings:
                    continue

                emoji_map = {
                    Severity.CRITICAL: "üî¥",
                    Severity.HIGH: "üü†",
                    Severity.MEDIUM: "üü°",
                    Severity.LOW: "üîµ"
                }

                lines.append(f"### {emoji_map[severity]} {severity.value} Severity\n")

                for finding in severity_findings:
                    lines.append(f"#### {finding.title}\n")
                    lines.append(f"{finding.description}\n")

                    if finding.file_path:
                        lines.append(f"**Location:** `{finding.file_path}`\n")

                    if finding.owasp:
                        lines.append(f"**OWASP:** {finding.owasp}")
                    if finding.cwe:
                        lines.append(f"**CWE:** {finding.cwe}\n")

                    if finding.remediation:
                        lines.append("**How to Fix:**\n")
                        lines.append(f"{finding.remediation.summary}\n")

                        if finding.remediation.fix_steps:
                            for step in finding.remediation.fix_steps:
                                lines.append(f"- {step}")
                            lines.append("")

                        if finding.remediation.code_before and finding.remediation.code_after:
                            lines.append("**Before:**")
                            lines.append("```dart")
                            lines.append(finding.remediation.code_before)
                            lines.append("```\n")

                            lines.append("**After:**")
                            lines.append("```dart")
                            lines.append(finding.remediation.code_after)
                            lines.append("```\n")

                    lines.append("---\n")

        # Recommendations
        lines.append("## Recommendations\n")
        if counts.get('CRITICAL', 0) > 0:
            lines.append("‚ö†Ô∏è **URGENT:** Fix critical issues immediately before production release.")
        elif counts.get('HIGH', 0) > 0:
            lines.append("‚ö†Ô∏è Fix high severity issues within 1 week.")
        else:
            lines.append("‚úÖ Good security posture! Continue monitoring.")

        lines.append(f"\n---\n*Generated by FlutterSecAudit v0.1.0*")

        # Write to file
        output_file = Path(output_path)
        output_file.write_text('\n'.join(lines))
